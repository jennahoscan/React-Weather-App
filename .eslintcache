[{"/Applications/Documents/react-weather-app/src/index.js":"1","/Applications/Documents/react-weather-app/src/App.js":"2","/Applications/Documents/react-weather-app/src/reportWebVitals.js":"3","/Applications/Documents/react-weather-app/src/Forecast.js":"4","/Applications/Documents/react-weather-app/src/Footer.js":"5","/Applications/Documents/react-weather-app/src/Illustrations.js":"6","/Applications/Documents/react-weather-app/src/Time.js":"7"},{"size":500,"mtime":1610729590897,"results":"8","hashOfConfig":"9"},{"size":293,"mtime":1615136450324,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610665100488,"results":"11","hashOfConfig":"9"},{"size":9278,"mtime":1615136133459,"results":"12","hashOfConfig":"9"},{"size":319,"mtime":1615136090348,"results":"13","hashOfConfig":"9"},{"size":734,"mtime":1615136628874,"results":"14","hashOfConfig":"9"},{"size":583,"mtime":1615136253818,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"iz1ip7",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Applications/Documents/react-weather-app/src/index.js",[],["32","33"],"/Applications/Documents/react-weather-app/src/App.js",[],"/Applications/Documents/react-weather-app/src/reportWebVitals.js",[],"/Applications/Documents/react-weather-app/src/Forecast.js",["34","35","36"],"//Libraries\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\n\n//Components\nimport Time from \"./Time\";\n\n//CSS Files\nimport \"./Forecast.css\";\nimport \"./Header.css\";\nimport \"./LocationAndDate.css\";\n\n//Weather Icons\nimport Clouds from \"./Images/Clouds.png\";\nimport DayCloud from \"./Images/DayCloud.png\";\nimport DayRain from \"./Images/DayRain.png\";\nimport Hail from \"./Images/Hail.png\";\nimport Mist from \"./Images/Mist.png\";\nimport Moon from \"./Images/Moon.png\";\nimport NightCloud from \"./Images/NightCloud.png\";\nimport NightRain from \"./Images/NightRain.png\";\nimport OneCloud from \"./Images/OneCloud.png\";\nimport Rain from \"./Images/Rain.png\";\nimport Snow from \"./Images/Snow.png\";\nimport Sun from \"./Images/Sun.png\";\nimport Thunderstorm from \"./Images/Thunderstorm.png\";\nimport Wind from \"./Images/Wind.png\";\n\nexport default function Forecast() {\n  let [currentDate, setCurrentDate] = useState(\"\");\n  let [pageNumber, setPageNumber] = useState(6);\n  let [pages, setPages] = useState([]);\n\n  function formatDate(timestamp) {\n    let date = new Date(timestamp);\n\n    const daysOfWeek = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    let dayNumber = date.getDay();\n    let dayName = daysOfWeek[dayNumber];\n\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n\n    let monthNumber = date.getMonth();\n    let monthName = monthNames[monthNumber];\n\n    let day = date.getDate();\n\n    setCurrentDate(`${dayName}, ${monthName} ${day}`);\n  }\n\n  //Locate User\n  function locateUser() {\n    navigator.geolocation.getCurrentPosition(getPosition);\n  }\n\n  function getPosition(position) {\n    let lat = position.coords.latitude;\n    let lon = position.coords.longitude;\n    let units = \"metric\";\n    let apiKey = \"5ed4231e4848c446bb7ab760ec22172f\";\n    let apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=${apiKey}&units=${units}`;\n    axios.get(apiUrl).then(getForecast);\n  }\n\n  //Update City on Search\n  function handleCity(event) {\n    setCity(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  //Get Forecast\n  const [loaded, setLoaded] = useState(false);\n  const [city, setCity] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [degree, setDegree] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [humidity, setHumidity] = useState(\"\");\n  const [wind, setWind] = useState(\"\");\n  const [icon, setIcon] = useState(\"\");\n\n  function getForecast(response) {\n    setPages([\n      {\n        city: response.data.name,\n        date: formatDate(response.data.daily[1].dt * 1000),\n        degree: Math.round(response.data.daily[1].temp.day - 273.15),\n        description: response.data.daily[1].weather[0].description,\n        humidity: response.data.daily[1].humidity,\n        wind: Math.round(response.data.daily[1].wind_speed),\n        icon: response.data.daily[1].weather[0].icon,\n      },\n      {\n        city: response.data.name,\n        date: formatDate(response.data.daily[2].dt * 1000),\n        degree: Math.round(response.data.daily[2].temp.day - 273.15),\n        description: response.data.daily[2].weather[0].description,\n        humidity: response.data.daily[2].humidity,\n        wind: Math.round(response.data.daily[2].wind_speed),\n        icon: response.data.daily[2].weather[0].icon,\n      },\n      {\n        city: response.data.name,\n        date: formatDate(response.data.daily[3].dt * 1000),\n        degree: Math.round(response.data.daily[3].temp.day - 273.15),\n        description: response.data.daily[3].weather[0].description,\n        humidity: response.data.daily[3].humidity,\n        wind: Math.round(response.data.daily[3].wind_speed),\n        icon: response.data.daily[3].weather[0].icon,\n      },\n      {\n        city: response.data.name,\n        date: formatDate(response.data.daily[4].dt * 1000),\n        degree: Math.round(response.data.daily[4].temp.day - 273.15),\n        description: response.data.daily[4].weather[0].description,\n        humidity: response.data.daily[4].humidity,\n        wind: Math.round(response.data.daily[4].wind_speed),\n        icon: response.data.daily[4].weather[0].icon,\n      },\n      {\n        city: response.data.name,\n        date: formatDate(response.data.daily[5].dt * 1000),\n        degree: Math.round(response.data.daily[5].temp.day - 273.15),\n        description: response.data.daily[5].weather[0].description,\n        humidity: response.data.daily[5].humidity,\n        wind: Math.round(response.data.daily[5].wind_speed),\n        icon: response.data.daily[5].weather[0].icon,\n      },\n      {\n        city: response.data.name,\n        date: formatDate(response.data.daily[6].dt * 1000),\n        degree: Math.round(response.data.daily[6].temp.day - 273.15),\n        description: response.data.daily[6].weather[0].description,\n        humidity: response.data.daily[6].humidity,\n        wind: Math.round(response.data.daily[6].wind_speed),\n        icon: response.data.daily[6].weather[0].icon,\n      },\n      {\n        city: response.data.name,\n        date: formatDate(response.data.current.dt * 1000),\n        degree: Math.round(response.data.current.temp - 273.15),\n        description: response.data.current.weather[0].description,\n        humidity: response.data.current.humidity,\n        wind: Math.round(response.data.current.wind_speed),\n        icon: response.data.current.weather[0].icon,\n      },\n    ]);\n    setLoaded(true);\n  }\n\n  console.log(pages);\n\n  function next() {\n    setPageNumber(pageNumber + 1);\n    if (pageNumber > pages.length - 1) {\n      setPageNumber(0);\n    }\n    updateSection();\n  }\n\n  function previous() {\n    setPageNumber(pageNumber - 1);\n    if (pageNumber < 0) {\n      setPageNumber(pages.length - 1);\n    }\n    updateSection();\n  }\n\n  function updateSection() {\n    setCity(pages[pageNumber].city);\n    setDate(pages[pageNumber].date);\n    setDegree(pages[pageNumber].degree);\n    setDescription(pages[pageNumber].description);\n    setHumidity(pages[pageNumber].humidity);\n    setWind(pages[pageNumber].wind);\n    setIcon(pages[pageNumber].icon);\n\n    let code = pages[pageNumber].icon;\n\n    if (code === \"11d\") {\n      setIcon(Thunderstorm);\n    } else if (code === \"09d\") {\n      setIcon(Rain);\n    } else if (code === \"10d\") {\n      setIcon(DayRain);\n    } else if (code === \"09d\") {\n      setIcon(NightRain);\n    } else if (code === \"13d\") {\n      setIcon(Snow);\n    } else if (code === \"50d\") {\n      setIcon(Mist);\n    } else if (code === \"01d\") {\n      setIcon(Sun);\n    } else if (code === \"01n\") {\n      setIcon(Moon);\n    } else if (code === \"02d\") {\n      setIcon(DayCloud);\n    } else if (code === \"02n\") {\n      setIcon(NightCloud);\n    } else if (code === \"03d\" || code === \"03n\") {\n      setIcon(OneCloud);\n    } else if (code === \"04d\" || code === \"04n\") {\n      setIcon(Clouds);\n    }\n  }\n\n  if (loaded) {\n    return (\n      <div>\n        <header>\n          <button id=\"get-location\" onClick={locateUser}>\n            <img id=\"pin\" src=\"./Images/Pin.png\" alt=\"\" />\n            Get Location\n          </button>\n          <Time />\n          <form onSubmit={handleSubmit} id=\"search-form\">\n            <input type=\"search\" id=\"search-input\" onChange={handleCity} />\n          </form>\n        </header>\n        <div className=\"description\">\n          <h1>\n            <span id=\"current-city\">{city}</span>\n          </h1>\n          <h2 id=\"current-date\">{date}</h2>\n        </div>\n        <div id=\"outer\">\n          <button onClick={previous}>\n            <img\n              className=\"arrows\"\n              id=\"left\"\n              src=\"Images/LeftArrow.png\"\n              alt=\"\"\n            />\n          </button>\n          <img id=\"icon\" src={icon} alt=\"\" />\n          <div className=\"centered\">\n            <span id=\"degree\">{degree}</span>\n            <span id=\"degree-symbol\">&deg;</span>\n            <div className=\"temperature\">\n              <button id=\"celsius\">C&nbsp;</button>\n              <button id=\"farenheit\">| F</button>\n            </div>\n          </div>\n          <button onClick={next}>\n            <img\n              className=\"arrows\"\n              id=\"right\"\n              src=\"Images/RightArrow.png\"\n              alt=\"\"\n            />\n          </button>\n        </div>\n        <div>\n          <p>\n            <span id=\"description\">{description}</span>\n            <br />\n            Humidity: <span id=\"humidity\">{humidity}</span>% | Wind:{\" \"}\n            <span id=\"wind\">{wind}</span> mph\n          </p>\n        </div>\n      </div>\n    );\n  } else {\n    locateUser();\n\n    return (\n      <div>\n        <header>\n          <button id=\"get-location\" onClick={locateUser}>\n            <img id=\"pin\" src=\"./Images/Pin.png\" alt=\"\" />\n            <span id=\"location-button\">Get Location</span>\n          </button>\n          <Time />\n          <form onSubmit={handleSubmit} id=\"search-form\">\n            <input type=\"search\" id=\"search-input\" onChange={handleCity} />\n          </form>\n        </header>\n        <p>Loading...</p>\n      </div>\n    );\n  }\n}\n","/Applications/Documents/react-weather-app/src/Footer.js",[],"/Applications/Documents/react-weather-app/src/Illustrations.js",[],"/Applications/Documents/react-weather-app/src/Time.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":17,"column":8,"nodeType":"43","messageId":"44","endLine":17,"endColumn":12},{"ruleId":"41","severity":1,"message":"45","line":27,"column":8,"nodeType":"43","messageId":"44","endLine":27,"endColumn":12},{"ruleId":"41","severity":1,"message":"46","line":30,"column":8,"nodeType":"43","messageId":"44","endLine":30,"endColumn":19},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'Hail' is defined but never used.","Identifier","unusedVar","'Wind' is defined but never used.","'currentDate' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]